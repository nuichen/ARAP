<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pnlexit.BackgroundImage" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        /9j/7gAOQWRvYmUAZAAAAAAB/+EAGEV4aWYAAElJKgAIAAAAAAAAAAAAAAD/7AARRHVja3kAAQAEAAAA
        ZAAA/+EDb2h0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC8APD94cGFja2V0IGJlZ2luPSLvu78iIGlk
        PSJXNU0wTXBDZWhpSHpyZVN6TlRjemtjOWQiPz4gPHg6eG1wbWV0YSB4bWxuczp4PSJhZG9iZTpuczpt
        ZXRhLyIgeDp4bXB0az0iQWRvYmUgWE1QIENvcmUgNS4zLWMwMTEgNjYuMTQ1NjYxLCAyMDEyLzAyLzA2
        LTE0OjU2OjI3ICAgICAgICAiPiA8cmRmOlJERiB4bWxuczpyZGY9Imh0dHA6Ly93d3cudzMub3JnLzE5
        OTkvMDIvMjItcmRmLXN5bnRheC1ucyMiPiA8cmRmOkRlc2NyaXB0aW9uIHJkZjphYm91dD0iIiB4bWxu
        czp4bXBNTT0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL21tLyIgeG1sbnM6c3RSZWY9Imh0dHA6
        Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9zVHlwZS9SZXNvdXJjZVJlZiMiIHhtbG5zOnhtcD0iaHR0cDov
        L25zLmFkb2JlLmNvbS94YXAvMS4wLyIgeG1wTU06T3JpZ2luYWxEb2N1bWVudElEPSJ4bXAuZGlkOjYx
        QjIxQTJCNDNFQkU1MTFBN0Y4ODFDQkMzRjg1ODEyIiB4bXBNTTpEb2N1bWVudElEPSJ4bXAuZGlkOjdC
        MzZDMjA5MkZCRjExRTZBNkQ4OERGMUVCRjNCOUVBIiB4bXBNTTpJbnN0YW5jZUlEPSJ4bXAuaWlkOjdC
        MzZDMjA4MkZCRjExRTZBNkQ4OERGMUVCRjNCOUVBIiB4bXA6Q3JlYXRvclRvb2w9IkFkb2JlIFBob3Rv
        c2hvcCBDUzYgKFdpbmRvd3MpIj4gPHhtcE1NOkRlcml2ZWRGcm9tIHN0UmVmOmluc3RhbmNlSUQ9Inht
        cC5paWQ6NDA0RkVFOENCQzJGRTYxMTg1QkI4QjU0QzhEODBGNDAiIHN0UmVmOmRvY3VtZW50SUQ9Inht
        cC5kaWQ6NjFCMjFBMkI0M0VCRTUxMUE3Rjg4MUNCQzNGODU4MTIiLz4gPC9yZGY6RGVzY3JpcHRpb24+
        IDwvcmRmOlJERj4gPC94OnhtcG1ldGE+IDw/eHBhY2tldCBlbmQ9InIiPz7/2wBDAAEBAQEBAQEBAQEB
        AQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQECAgICAgICAgICAgMDAwMDAwMDAwP/2wBDAQEB
        AQEBAQIBAQICAgECAgMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMD
        AwP/wAARCAAkAE0DAREAAhEBAxEB/8QAHwAAAQUBAQEBAQEAAAAAAAAAAAECAwQFBgcICQoL/8QAtRAA
        AgEDAwIEAwUFBAQAAAF9AQIDAAQRBRIhMUEGE1FhByJxFDKBkaEII0KxwRVS0fAkM2JyggkKFhcYGRol
        JicoKSo0NTY3ODk6Q0RFRkdISUpTVFVWV1hZWmNkZWZnaGlqc3R1dnd4eXqDhIWGh4iJipKTlJWWl5iZ
        mqKjpKWmp6ipqrKztLW2t7i5usLDxMXGx8jJytLT1NXW19jZ2uHi4+Tl5ufo6erx8vP09fb3+Pn6/8QA
        HwEAAwEBAQEBAQEBAQAAAAAAAAECAwQFBgcICQoL/8QAtREAAgECBAQDBAcFBAQAAQJ3AAECAxEEBSEx
        BhJBUQdhcRMiMoEIFEKRobHBCSMzUvAVYnLRChYkNOEl8RcYGRomJygpKjU2Nzg5OkNERUZHSElKU1RV
        VldYWVpjZGVmZ2hpanN0dXZ3eHl6goOEhYaHiImKkpOUlZaXmJmaoqOkpaanqKmqsrO0tba3uLm6wsPE
        xcbHyMnK0tPU1dbX2Nna4uPk5ebn6Onq8vP09fb3+Pn6/9oADAMBAAIRAxEAPwD+sevwU/RQoAKACgDD
        vfE/hrTNRtdH1HxDoen6vfbPsWl3urWFpqN55jFE+y2M9xHc3G9xgbFOTxXLVx2BoVo4avWpQxE/hjKc
        VJ+kW7v5I66WAx9ehLE0KFaeGh8U4wk4x9ZJWXzZuV1HIYmr+JvDfh9rZNe8QaJojXrmOzXV9VsNNa7k
        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
        CgAoAKACgAoAKACgAoAKACgAoA//2Q==
</value>
  </data>
</root>